generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  image         String?

  // RoastMyApp specific fields
  primaryRole       String?           @default("creator") // "creator" | "roaster" | "both"
  hasTriedBothRoles Boolean          @default(false)
  onboardingStep    Int              @default(0) // 0: not started, 4: completed
  daysSinceSignup   Int              @default(0)

  sessions      Session[]
  accounts      Account[]
  
  // RoastMyApp relations
  creatorProfile    CreatorProfile?
  roasterProfile    RoasterProfile?
  roastRequests     RoastRequest[]
  feedbacksGiven    Feedback[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CreatorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  company        String?
  projectsPosted Int      @default(0)
  totalSpent     Float    @default(0)
  avgRating      Float    @default(0)
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@map("creator_profiles")
}

model RoasterProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specialties      String[] // ["UX", "Dev", "Business", "Marketing"]
  languages        String[] @default(["Français"])
  experience       String   @default("Débutant") // "Débutant", "Intermédiaire", "Expert"
  portfolio        String?
  bio              String?
  
  // Métriques
  rating           Float    @default(0)
  completedRoasts  Int      @default(0)
  totalEarned      Float    @default(0)
  completionRate   Float    @default(100)
  avgResponseTime  Int      @default(24) // heures
  
  // Disponibilité
  maxActiveRoasts  Int      @default(3)
  currentActive    Int      @default(0)
  
  // Status
  level            String   @default("rookie") // "rookie", "verified", "expert", "master"
  verified         Boolean  @default(false)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("roaster_profiles")
}

model RoastRequest {
  id              String   @id @default(cuid())
  creatorId       String
  creator         User     @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  
  title           String
  appUrl          String
  description     String
  targetAudience  String?
  focusAreas      String[] // ["UX", "Onboarding", "Pricing"]
  maxPrice        Float    // Prix maximum fixé par le créateur
  deadline        DateTime?
  status          String   @default("open") // "open", "in_progress", "completed"
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  feedbacks       Feedback[]
  questions       RoastQuestion[]
  
  @@map("roast_requests")
}

model RoastQuestion {
  id              String   @id @default(cuid())
  roastRequestId  String
  roastRequest    RoastRequest @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)
  
  domain          String   // Le domaine associé (UX, Onboarding, etc.)
  text            String   // Le texte de la question
  order           Int      // L'ordre de la question
  isDefault       Boolean  @default(false) // Si c'est une question par défaut
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("roast_questions")
}

model Feedback {
  id                String      @id @default(cuid())
  roastRequestId    String
  roastRequest      RoastRequest @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)
  roasterId         String
  roaster           User        @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  
  // Contenu structuré
  firstImpression   String
  strengthsFound    String[]
  weaknessesFound   String[]
  actionableSteps   String[]
  competitorComparison String?
  screenshots       String[]
  
  // Évaluation
  aiQualityScore    Float?      // 0-100
  creatorRating     Int?        // 1-5
  finalPrice        Float?
  
  status            String      @default("pending") // "pending", "completed", "disputed"
  
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  
  @@map("feedbacks")
}
