generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id                String             @id
  email             String             @unique
  emailVerified     Boolean            @default(false)
  name              String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  image             String?
  primaryRole       String?            @default("creator")
  hasTriedBothRoles Boolean            @default(false)
  onboardingStep    Int                @default(0)
  daysSinceSignup   Int                @default(0)
  accounts          Account[]
  sessions          Session[]
  creatorProfile    CreatorProfile?
  feedbacksGiven    Feedback[]
  applications      RoastApplication[]
  roastRequests     RoastRequest[]
  roasterProfile    RoasterProfile?
  createdAudiences  TargetAudience[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CreatorProfile {
  id             String   @id @default(cuid())
  userId         String   @unique
  company        String?
  projectsPosted Int      @default(0)
  totalSpent     Float    @default(0)
  avgRating      Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("creator_profiles")
}

model RoasterProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  specialties     String[]
  languages       String[] @default(["Français"])
  experience      String   @default("Débutant")
  portfolio       String?
  bio             String?
  rating          Float    @default(0)
  completedRoasts Int      @default(0)
  totalEarned     Float    @default(0)
  completionRate  Float    @default(100)
  avgResponseTime Int      @default(24)
  maxActiveRoasts Int      @default(3)
  currentActive   Int      @default(0)
  level           String   @default("rookie")
  verified        Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("roaster_profiles")
}

model RoastRequest {
  id                 String                    @id @default(cuid())
  creatorId          String
  title              String
  appUrl             String
  description        String
  focusAreas         String[]
  maxPrice           Float
  deadline           DateTime?
  status             String                    @default("open")
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  coverImage         String?
  feedbacksRequested Int                       @default(1)
  feedbacks          Feedback[]
  applications       RoastApplication[]
  questions          RoastQuestion[]
  creator            User                      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  targetAudiences    RoastRequestAudience[]

  @@map("roast_requests")
}

model RoastQuestion {
  id             String       @id @default(cuid())
  roastRequestId String
  domain         String
  text           String
  order          Int
  isDefault      Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  roastRequest   RoastRequest @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)

  @@map("roast_questions")
}

model RoastApplication {
  id             String       @id @default(cuid())
  roastRequestId String
  roasterId      String
  motivation     String?
  status         String       @default("pending")
  score          Float        @default(0)
  selectedAt     DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  roastRequest   RoastRequest @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)
  roaster        User         @relation(fields: [roasterId], references: [id], onDelete: Cascade)

  @@unique([roastRequestId, roasterId])
  @@map("roast_applications")
}

model Feedback {
  id                String             @id @default(cuid())
  roastRequestId    String
  roasterId         String
  screenshots       String[]
  aiQualityScore    Float?
  creatorRating     Int?
  finalPrice        Float?
  status            String             @default("pending")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  generalFeedback   String
  roastRequest      RoastRequest       @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)
  roaster           User               @relation(fields: [roasterId], references: [id], onDelete: Cascade)
  questionResponses QuestionResponse[]

  @@map("feedbacks")
}

model QuestionResponse {
  id         String   @id @default(cuid())
  feedbackId String
  questionId String
  response   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  feedback   Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)

  @@unique([feedbackId, questionId])
  @@map("question_responses")
}

model TargetAudience {
  id            String                 @id @default(cuid())
  name          String                 @unique
  isDefault     Boolean                @default(true)
  createdBy     String?
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  roastRequests RoastRequestAudience[]
  creator       User?                  @relation(fields: [createdBy], references: [id])

  @@map("target_audiences")
}

model RoastRequestAudience {
  id               String         @id @default(cuid())
  roastRequestId   String
  targetAudienceId String
  createdAt        DateTime       @default(now())
  roastRequest     RoastRequest   @relation(fields: [roastRequestId], references: [id], onDelete: Cascade)
  targetAudience   TargetAudience @relation(fields: [targetAudienceId], references: [id], onDelete: Cascade)

  @@unique([roastRequestId, targetAudienceId])
  @@map("roast_request_audiences")
}
